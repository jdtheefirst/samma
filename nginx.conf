daemon off;
error_log /dev/stdout info;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen 1935;  # Standard RTMP port123
        chunk_size 4000;

        application stream {
            live on;
            hls on;
            hls_path /opt/data/hls;
            hls_cleanup on;
            hls_fragment 2s;
            hls_playlist_length 10s;
        }
    }
}


http {
    root /usr/share/nginx/html;
    sendfile off;
    tcp_nopush on;
    server_tokens off;
    access_log /dev/stdout combined;

    server {
        listen 80;
        server_name test.worldsamma.org;

        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
         listen 443 ssl;
         server_name worldsamma.org;

         ssl_certificate /etc/nginx/certificates/fullchain.pem;
         ssl_certificate_key /etc/nginx/certificates/privkey.pem;
         ssl_protocols TLSv1.2 TLSv1.3;
         ssl_ciphers HIGH:!aNULL:!MD5;

         # Serve frontend files at root
        location / {
         try_files $uri /index.html;  # React routing will handle the rest
        }

         # Proxy for backend API
       location /api/ {
         proxy_pass http://backend:8080;
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "upgrade";
         proxy_set_header Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Forwarded-Proto $scheme;
         proxy_set_header Origin $http_origin;  # Add the Origin header
    
        # Ensure CORS headers are passed along
         proxy_set_header Access-Control-Allow-Origin "*";  # Adjust this to allow only specific origins
         proxy_set_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
         proxy_set_header Access-Control-Allow-Headers "Content-Type, Authorization";
         proxy_set_header Access-Control-Allow-Credentials "true";
        }


       # WebSocket for RTC
    #    location /rtc {
    #      proxy_pass http://147.182.242.250:7880/rtc;
    #      proxy_http_version 1.1;
    #      proxy_set_header Upgrade $http_upgrade;
    #      proxy_set_header Connection "upgrade";
    #      proxy_set_header Host $host;
    #      proxy_set_header X-Real-IP $remote_addr;
    #      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #      proxy_set_header X-Forwarded-Proto $scheme;
    #     }

        # REST endpoints like validate
        # location /rtc/ {
        #  proxy_pass http://147.182.242.250:7880/rtc/;
        #  proxy_http_version 1.1;
        #  proxy_set_header Host $host;
        #  proxy_set_header X-Real-IP $remote_addr;
        #  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #  proxy_set_header X-Forwarded-Proto $scheme;
        # }

    #    location /twirp/ {
    #      proxy_pass http://147.182.242.250:7880/twirp/;
    #      proxy_set_header Host $host;
    #      proxy_set_header X-Real-IP $remote_addr;
    #      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #      proxy_set_header X-Forwarded-Proto $scheme;

    #      # Pass the Content-Type header correctly
    #      proxy_set_header Content-Type "application/json";

    #      # Allow WebSocket upgrade if needed
    #      proxy_http_version 1.1;
    #      proxy_set_header Upgrade $http_upgrade;
    #      proxy_set_header Connection "upgrade";
    #     }

        # Live stream files
        # location /live {
        #     alias /opt/data/hls;
        #     types {
        #         application/vnd.apple.mpegurl m3u8;
        #         video/mp2t ts;
        #     }
        #     add_header Cache-Control no-cache;
        #     add_header Access-Control-Allow-Origin *;
        # }

        location /crossdomain.xml {
            default_type text/xml;
            expires 24h;
        }
    }
}